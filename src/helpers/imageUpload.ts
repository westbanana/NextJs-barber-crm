import { ChangeEvent } from 'react';
import { toast } from 'react-toastify';

import { toastDefaultParams } from '@/constants/toast-constants';
import { FormObject } from '@/components/ui/UserIcon/user-icon.type';

 interface ImageUploadProps {
   event: ChangeEvent<HTMLInputElement>,
   maxSizeKb: number
   onChange: ((e: FormObject) => void) | undefined
 }

export const imageUpload = ({ event, maxSizeKb, onChange }: ImageUploadProps) => {
  const file = event.target.files && event.target.files[0];
  if (file) {
    const reader = new FileReader();

    reader.onloadend = () => {
      const img = new Image();
      img.src = reader.result as string;
      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        canvas.width = img.width; // –®–∏—Ä–∏–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        canvas.height = img.height; // –í—ã—Å–æ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        // –ü–æ–ª—É—á–∞–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const compressedImage = canvas.toDataURL('image/jpeg', 0.35); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        const imageSizeInKB = ((compressedImage.length * 3) / 4 / 1024).toFixed(2);
        if (+imageSizeInKB > maxSizeKb) {
          toast.error('üò±–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥—É–∂–µ –≤–µ–ª–∏–∫–µ! ', toastDefaultParams);
          return;
        }
        const responseResult:FormObject = {
          target: {
            id: 'userIcon',
            value: compressedImage,
          },
        };
        if (onChange) {
          onChange?.(responseResult);
        }
      };
    };

    reader.readAsDataURL(file);
  }
};
